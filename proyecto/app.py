# app.py
import streamlit as st
import pickle
import pandas as pd
from sklearn.datasets import load_iris

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Clasificador de Iris",
    page_icon="üåº",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Cargar modelo y datos
@st.cache_resource
def load_model():
    try:
        with open('iris_model.pkl', 'rb') as file:
            model = pickle.load(file)
        iris = load_iris()
        return model, iris
    except Exception as e:
        st.error(f"Error cargando el modelo: {e}")
        return None, None

model, iris = load_model()

# T√≠tulo principal
st.title("üåº Clasificador de Flores Iris")
st.markdown("""
Esta aplicaci√≥n predice la especie de una flor Iris bas√°ndose en sus medidas.
Utiliza un modelo de Machine Learning (Random Forest) entrenado con el dataset cl√°sico de Iris.
""")

# Sidebar con inputs
st.sidebar.header("üìè Medidas de la Flor")
st.sidebar.markdown("Ajusta las medidas usando los sliders:")

def get_user_input():
    sepal_length = st.sidebar.slider(
        'Longitud del s√©palo (cm)',
        min_value=4.0, max_value=8.0, value=5.4, step=0.1
    )
    sepal_width = st.sidebar.slider(
        'Ancho del s√©palo (cm)',
        min_value=2.0, max_value=4.5, value=3.4, step=0.1
    )
    petal_length = st.sidebar.slider(
        'Longitud del p√©talo (cm)',
        min_value=1.0, max_value=7.0, value=1.3, step=0.1
    )
    petal_width = st.sidebar.slider(
        'Ancho del p√©talo (cm)',
        min_value=0.1, max_value=2.5, value=0.2, step=0.1
    )
    
    return {
        'sepal_length': sepal_length,
        'sepal_width': sepal_width,
        'petal_length': petal_length,
        'petal_width': petal_width
    }

user_input = get_user_input()

# Mostrar inputs del usuario
st.subheader("üìã Medidas Ingresadas")
col1, col2, col3, col4 = st.columns(4)
with col1:
    st.metric("Longitud S√©palo", f"{user_input['sepal_length']} cm")
with col2:
    st.metric("Ancho S√©palo", f"{user_input['sepal_width']} cm")
with col3:
    st.metric("Longitud P√©talo", f"{user_input['petal_length']} cm")
with col4:
    st.metric("Ancho P√©talo", f"{user_input['petal_width']} cm")

# Bot√≥n de predicci√≥n
if st.sidebar.button("üéØ Predecir Especie", type="primary"):
    if model is None or iris is None:
        st.error("El modelo no est√° disponible. Por favor, verifica que el archivo del modelo existe.")
    else:
        try:
            # Convertir a DataFrame para la predicci√≥n
            input_df = pd.DataFrame([user_input])
            
            # Hacer predicci√≥n
            prediction = model.predict(input_df)
            prediction_proba = model.predict_proba(input_df)
            
            # Mostrar resultados
            st.subheader("üìä Resultados de la Predicci√≥n")
            
            # Tarjeta con la especie predicha
            species = iris.target_names[prediction][0]
            st.success(f"### Especie Predicha: **{species}**")
            
            # Mostrar probabilidades
            st.subheader("üìà Probabilidades por Especie")
            
            proba_df = pd.DataFrame({
                'Especie': iris.target_names,
                'Probabilidad': prediction_proba[0]
            })
            
            # Gr√°fico de barras
            st.bar_chart(proba_df.set_index('Especie'))
            
            # Tabla de probabilidades
            st.dataframe(
                proba_df.style.format({'Probabilidad': '{:.2%}'}),
                use_container_width=True
            )
            
        except Exception as e:
            st.error(f"Error en la predicci√≥n: {e}")

# Informaci√≥n adicional
with st.expander("‚ÑπÔ∏è Acerca de esta aplicaci√≥n"):
    st.markdown("""
    **Caracter√≠sticas t√©cnicas:**
    - **Dataset:** Iris de sklearn (150 muestras)
    - **Modelo:** Random Forest Classifier (100 √°rboles)
    - **Precisi√≥n:** 96.67% en conjunto de prueba
    - **Framework:** Streamlit
    - **Despliegue:** Render.com
    
    **Especies de Iris:**
    - **0: Setosa** - Flores peque√±as, s√©palos grandes
    - **1: Versicolor** - Flores medianas
    - **2: Virginica** - Flores grandes, p√©talos anchos
    """)

# Footer
st.markdown("---")
st.caption("Desplegado usando Streamlit y Render | Modelo de Machine Learning")